version: '3'
services:
  # traefik:  # 负载均衡服务
  #   image: traefik:latest
  #   container_name: traefik
  #   restart: always
  #   ports: 
  #     - "80:80"
  #     - "443:443"
  #     - "8080:8080"
  #     # - "22:22"
  #   volumes:
  #     - ./zone/traefik.toml:/etc/traefik/traefik.toml
  #     - /var/run/docker.sock:/var/run/docker.sock

  whoami:
    image: containous/whoami
    # labels:
    #   - "traefik.http.routers.whoami.rule=Host(`whoami.docker.local`)"

  # redis:  
  #   image: redis:3.2.1
  #   container_name: redis
  #   restart: always
  #   ports:
  #     - "6379:6379"

  postgres:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - /data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: root
      POSTGRES_DB: gogs
      POSTGRES_PASSWORD: 123456
    
  adminer:
    image: adminer
    restart: always
    ports:
      - 8085:8080
    # labels:
    #   - "traefik.http.routers.adminer.rule=Host(`adminer.docker.local`)"

  gogs:
    image: gogs/gogs:latest
    ports:
      - "3000:3000"
      - "10022:22"
    volumes:
      - /data/gogs:/data
    depends_on:
      - postgres

  drone-server:
    image: drone/drone:latest
    ports:
      - "8082:80"
      - 8843:443
      - 9000
    volumes:
      - /data/drone:/var/lib/drone/
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_USER_CREATE=username:demo,admin:true
      # - DRONE_GITLAB_PRIVATE_MODE=true
      - DRONE_OPEN=true
      - DRONE_SERVER_HOST=drone-server
      - DRONE_DEBUG=true
      - DRONE_GIT_ALWAYS_AUTH=false
      - DRONE_GOGS=true
      - DRONE_GOGS_SKIP_VERIFY=false
      - DRONE_GOGS_SERVER=http://gogs:3000
      - DRONE_PROVIDER=gogs
      - DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite
      - DRONE_DATABASE_DRIVER=sqlite3
      - DRONE_SERVER_PROTO=http
      - DRONE_RPC_SECRET=ALQU2M0KdptXUdTPKcEw
      - DRONE_SECRET=ALQU2M0KdptXUdTPKcEw

  drone-agent:
    image: drone/drone-runner-docker
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone-server
      - DRONE_RPC_SECRET=ALQU2M0KdptXUdTPKcEw
      - DRONE_RUNNER_NAME=${HOSTNAME:-demo}
      - DRONE_RUNNER_CAPACITY=2
      # - DOCKER_HOST=tcp://docker-bind:2375

  # docker-bind:
  #    image: docker:dind
  #    privileged: true
  #    volumes:
  #     - /data/docker-bind/var-lib-docker:/var/lib/docker
  #    environment:
  #     DOCKER_TLS_CERTDIR: ""
  #    command: --storage-driver=overlay
     
networks:
  default:
    external:
      name: dczone_default